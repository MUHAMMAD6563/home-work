import json
import os

DATA_FILE = "contacts.json"

# ✅ Contact Class
class Contact:
    def __init__(self, name, phone, email):
        self.name = name
        self.phone = phone
        self.email = email

    def to_dict(self):
        return {
            "name": self.name,
            "phone": self.phone,
            "email": self.email
        }

# ✅ Load Contacts from File
def load_contacts():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as file:
                data = json.load(file)
                return [Contact(**contact) for contact in data]
        except Exception as e:
            print("Error loading contacts:", e)
    return []

# ✅ Save Contacts to File
def save_contacts(contacts):
    try:
        with open(DATA_FILE, "w") as file:
            json.dump([contact.to_dict() for contact in contacts], file, indent=4)
    except Exception as e:
        print("Error saving contacts:", e)

# ✅ Add Contact
def add_contact(contacts):
    try:
        name = input("Enter name: ")
        phone = input("Enter phone number: ")
        email = input("Enter email: ")
        contact = Contact(name, phone, email)
        contacts.append(contact)
        save_contacts(contacts)
        print("Contact added successfully.")
    except Exception as e:
        print("Error adding contact:", e)

# ✅ View All Contacts
def view_contacts(contacts):
    if not contacts:
        print("No contacts found.")
    else:
        print("\n--- Contact List ---")
        for idx, contact in enumerate(contacts, 1):
            print(f"{idx}. Name: {contact.name}, Phone: {contact.phone}, Email: {contact.email}")

# ✅ Search Contact
def search_contact(contacts):
    keyword = input("Enter name or phone to search: ").lower()
    found = False
    for contact in contacts:
        if keyword in contact.name.lower() or keyword in contact.phone:
            print(f"Found - Name: {contact.name}, Phone: {contact.phone}, Email: {contact.email}")
            found = True
    if not found:
        print("No matching contact found.")

# ✅ Update Contact
def update_contact(contacts):
    view_contacts(contacts)
    try:
        index = int(input("Enter contact number to update: ")) - 1
        if 0 <= index < len(contacts):
            contact = contacts[index]
            new_name = input(f"New name (Leave blank to keep '{contact.name}'): ") or contact.name
            new_phone = input(f"New phone (Leave blank to keep '{contact.phone}'): ") or contact.phone
            new_email = input(f"New email (Leave blank to keep '{contact.email}'): ") or contact.email
            contacts[index] = Contact(new_name, new_phone, new_email)
            save_contacts(contacts)
            print("Contact updated successfully.")
        else:
            print("Invalid contact number.")
    except Exception as e:
        print("Error updating contact:", e)

# ✅ Delete Contact
def delete_contact(contacts):
    view_contacts(contacts)
    try:
        index = int(input("Enter contact number to delete: ")) - 1
        if 0 <= index < len(contacts):
            del contacts[index]
            save_contacts(contacts)
            print("Contact deleted successfully.")
        else:
            print("Invalid contact number.")
    except Exception as e:
        print("Error deleting contact:", e)

# ✅ Main Menu
def main_menu():
    contacts = load_contacts()
    while True:
        print("\n==== Simple Contact Book ====")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Search Contact")
        print("4. Update Contact")
        print("5. Delete Contact")
        print("6. Exit")

        try:
            choice = input("Enter your choice (1-6): ")
            if choice == "1":
                add_contact(contacts)
            elif choice == "2":
                view_contacts(contacts)
            elif choice == "3":
                search_contact(contacts)
            elif choice == "4":
                update_contact(contacts)
            elif choice == "5":
                delete_contact(contacts)
            elif choice == "6":
                print("Goodbye!")
                break
            else:
                print("Invalid choice. Try again.")
        except Exception as e:
            print("An error occurred:", e)

# ✅ Run the App
if __name__ == "__main__":
    main_menu()
